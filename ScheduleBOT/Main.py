import telebot
from db import *
from datetime import datetime, timedelta
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from Config import *
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

notification_cache = {}

def check_time_to_next_lesson(user_id, current_time, lesson_end_time, next_lesson_start_time):   
    current_timestamp = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    if user_id in notification_cache:
        if current_timestamp - notification_cache[user_id] < 300:  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
            return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ 5 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞
        if lesson_end_time - current_time <= 5 * 60:
            msg = bot.send_message(user_id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¥–æ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!")
            notification_cache[user_id] = current_timestamp

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        if next_lesson_start_time - current_time <= 5 * 60:
            msg = bot.send_message(user_id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!")
            notification_cache[user_id] = current_timestamp
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def start_time_checker():
    while True:
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT user_id FROM lessons")
            users = cursor.fetchall()
            
            current_time = datetime.now().time()
            current_seconds = current_time.hour * 3600 + current_time.minute * 60
            
            for user in users:
                user_id = user[0]
                lessons = get_sorted_lessons(user_id)
                
                if lessons:
                    for i in range(len(lessons)):
                        lesson_end = datetime.strptime(lessons[i][2], "%H:%M").time()
                        lesson_end_seconds = lesson_end.hour * 3600 + lesson_end.minute * 60
                        
                        if i < len(lessons) - 1:
                            next_lesson = datetime.strptime(lessons[i+1][1], "%H:%M").time()
                            next_lesson_seconds = next_lesson.hour * 3600 + next_lesson.minute * 60
                            
                            check_time_to_next_lesson(
                                user_id,
                                current_seconds,
                                lesson_end_seconds,
                                next_lesson_seconds
                            )
            
            conn.close()
            time.sleep(60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ time_checker: {e}")
            time.sleep(60)

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(user_id, username)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_key = ReplyKeyboardMarkup(resize_keyboard=True)
    main_key.add(KeyboardButton("üåµ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    bot.reply_to(message, f"{start_msg}", reply_markup=main_key)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üåµ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def send_schedule(message):
    user_id = message.from_user.id
    lessons = get_lessons(user_id)

    if not lessons:
        bot.reply_to(message, "‚úñÔ∏è –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return

    schedule = "‚úîÔ∏è –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    for lesson in lessons:
        schedule += f"{lesson[0]}: {lesson[1]} - {lesson[2]} | {lesson[3]}\n"
    bot.reply_to(message, schedule)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üïí –ò–∑–º–µ–Ω–∏—Ç—å")
def set_schedule(message):
    lesson_set = InlineKeyboardMarkup()
    lesson_set.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="addlesson"),
        InlineKeyboardButton("‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data="dellesson"),
        InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menureturn")
    )
    bot.reply_to(message, "‚úîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=lesson_set)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == "addlesson":
        bot.send_message(call.message.chat.id, "‚úîÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ (–ß–ß:–ú–ú):")
        bot.register_next_step_handler(call.message, process_start_time)
    elif call.data == "dellesson":
        delete_lesson(call.message)
    elif call.data == "menureturn":
        send_welcome(call.message)


def process_start_time(message):
    start_time = message.text.strip()
    if not validate_time_format(start_time):
        bot.reply_to(message, "‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    bot.send_message(message.chat.id, "‚úîÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ (–ß–ß:–ú–ú):")
    bot.register_next_step_handler(message, process_end_time, start_time)


def process_end_time(message, start_time):
    end_time = message.text.strip()
    if not validate_time_format(end_time) or start_time >= end_time:
        bot.reply_to(message, "‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    bot.send_message(message.chat.id, "‚úîÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    bot.register_next_step_handler(message, process_subject, start_time, end_time)


def process_subject(message, start_time, end_time):
    subject = message.text.strip()
    if not subject:
        bot.reply_to(message, "‚úñÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    add_lesson(message.from_user.id, start_time, end_time, subject)
    bot.reply_to(message, f"‚úîÔ∏è –£—Ä–æ–∫ '{subject}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å {start_time} –¥–æ {end_time}.")


def delete_lesson(message):
    user_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lessons = get_lessons(user_id)  # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not lessons:
        bot.reply_to(message, "‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return set_schedule

    schedule = "‚úîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for lesson in lessons:
        schedule += f"{lesson[0]}: {lesson[1]} - {lesson[2]} | {lesson[3]}\n"
    bot.reply_to(message, schedule + "\n–í–≤–µ–¥–∏—Ç–µ ID —É—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, confirm_delete_lesson)


def confirm_delete_lesson(message):
    try:
        lesson_id = int(message.text.strip())
        user_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —É—Ä–æ–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        lessons = get_lessons(user_id)
        lesson_ids = [lesson[0] for lesson in lessons]

        if lesson_id not in lesson_ids:
            bot.reply_to(message, "‚úñÔ∏è –£—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            return set_schedule

        delete_lesson_by_id(lesson_id)
        bot.reply_to(message, "‚úîÔ∏è –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except ValueError:
        bot.reply_to(message, "‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return set_schedule


def validate_time_format(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False    

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)